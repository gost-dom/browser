package configuration

import "github.com/gost-dom/code-gen/packagenames"

func ConfigureHTMLSpecs(specs *WebIdlConfigurations) {
	htmlSpecs := specs.Module("html")

	configureHTMLTemplateElement(htmlSpecs)
	configureHTMLElement(htmlSpecs)
	configureHTMLFormElement(htmlSpecs)
	configureHTMLInputElement(htmlSpecs)
	configureWindow(htmlSpecs)

	location := htmlSpecs.Type("Location")
	location.Method("ancestorOrigins").SetNotImplemented()

	htmlSvg := htmlSpecs.Type("HTMLOrSVGElement")
	htmlSvg.Method("focus").SetCustomImplementation()
	htmlSvg.Method("dataset").SetCustomImplementation()

	history := htmlSpecs.Type("History")
	history.OverrideWrappedType = &GoType{
		Name:    "History",
		Package: packagenames.HTMLInterfaces,
	}
	history.Method("pushState").Argument("unused").Ignore()
	history.Method("replaceState").Argument("unused").Ignore()
	history.Method("scrollRestoration").Ignore()

	htmlSpecs.Type("HTMLHyperlinkElementUtils")

	anchor := htmlSpecs.Type("HTMLAnchorElement")
	anchor.Method("download").Ignore()
	anchor.Method("Ping").Ignore()
	anchor.Method("ping").Ignore()
	anchor.Method("rel").Ignore()
	anchor.Method("hreflang").Ignore()
	anchor.Method("type").Ignore()
	anchor.Method("referrerPolicy").Ignore()
	anchor.Method("relList").Ignore()
	anchor.Method("text").Ignore()
}

func configureWindow(htmlSpecs *WebAPIConfig) {
	window := htmlSpecs.Type("Window")
	window.Method("self").SetCustomImplementation()
	window.Method("window").SetCustomImplementation()

	window.Method("location").Ignore()
	window.Method("parent").Ignore() // On `Node`
	window.Method("history").SetCustomImplementation()
	window.Method("prompt").Ignore()
	window.Method("close").SetNotImplemented()
	window.Method("stop").SetNotImplemented()
	window.Method("focus").SetNotImplemented()
	window.Method("blur").SetNotImplemented()
	window.Method("open").SetNotImplemented()
	window.Method("alert").SetNotImplemented()
	window.Method("confirm").SetNotImplemented()
	window.Method("postMessage").SetNotImplemented()
	window.Method("print").SetNotImplemented()
	window.Method("name").SetNotImplemented()
	window.Method("personalbar").SetNotImplemented()
	window.Method("locationbar").SetNotImplemented()
	window.Method("menubar").SetNotImplemented()
	window.Method("scrollbars").SetNotImplemented()
	window.Method("statusbar").SetNotImplemented()
	window.Method("status").SetNotImplemented()
	window.Method("toolbar").SetNotImplemented()
	window.Method("navigation").SetNotImplemented()
	window.Method("customElements").SetNotImplemented()
	window.Method("closed").SetNotImplemented()
	window.Method("frames").SetNotImplemented()
	window.Method("navigator").SetNotImplemented()
	window.Method("frames").SetNotImplemented()
	window.Method("top").SetNotImplemented()
	window.Method("opener").SetNotImplemented()
	window.Method("frameElement").SetNotImplemented()
	window.Method("clientInformation").SetNotImplemented()
	window.Method("originAgentCluster").SetNotImplemented()
	window.Method("length").SetNotImplemented()
}

func configureHTMLInputElement(htmlSpecs *WebAPIConfig) {
	input := htmlSpecs.Type("HTMLInputElement")
	input.Method("select").Ignore()
	input.Method("stepUp").Ignore()
	input.Method("stepDown").Ignore()
	input.Method("reportValidity").Ignore()
	input.Method("selectionRangeDirection").Ignore()
	input.Method("showPicker").Ignore()
	input.Method("accept").Ignore()
	input.Method("alpha").Ignore()
	input.Method("alt").Ignore()
	input.Method("autocomplete").Ignore()
	input.Method("checked").Ignore()
	input.Method("colorSpace").Ignore()
	input.Method("disabled").Ignore()
	input.Method("form").Ignore()
	input.Method("formAction").Ignore()
	input.Method("formMethod").Ignore()
	input.Method("formTarget").Ignore()
	input.Method("formEnctype").Ignore()
	input.Method("files").Ignore()
	input.Method("height").Ignore()
	input.Method("max").Ignore()
	input.Method("list").Ignore()
	input.Method("maxLength").Ignore()
	input.Method("minLength").Ignore()
	input.Method("multiple").Ignore()
	input.Method("setName").Ignore()
	input.Method("setPattern").Ignore()
	input.Method("placeholder").Ignore()
	input.Method("readonly").Ignore()
	input.Method("required").Ignore()
	input.Method("size").Ignore()
	input.Method("src").Ignore()
	input.Method("step").Ignore()
	input.Method("defaultValue").Ignore()
	input.Method("width").Ignore()
	input.Method("validationMessage").Ignore()
	input.Method("labels").Ignore()
	input.Method("selectionStart").Ignore()
	input.Method("selectionEnd").Ignore()
	input.Method("selectionDirection").Ignore()
	input.Method("willValidate").Ignore()
	input.Method("validity").Ignore()
	input.Method("valueAsNumber").Ignore()
	input.Method("valueAsDate").Ignore()
	input.Method("customValidity").Ignore()
	input.Method("setCustomValidity").Ignore()
	input.Method("setRangeText").Ignore()
	input.Method("setSelectionRange").Ignore()
	input.Method("defaultChecked").Ignore()
	input.Method("dirName").Ignore()
	input.Method("formNoValidate").Ignore()
	input.Method("indeterminate").Ignore()
	input.Method("min").Ignore()
	input.Method("name").Ignore()
	input.Method("value").Ignore()
	input.Method("readOnly").Ignore()
	input.Method("pattern").Ignore()

}

func configureHTMLFormElement(htmlSpecs *WebAPIConfig) {
	form := htmlSpecs.Type("HTMLFormElement")
	form.Method("requestSubmit").Argument("submitter").SetHasDefault()
	form.Method("reset").SetNotImplemented()
	form.Method("checkValidity").SetNotImplemented()
	form.Method("reportValidity").SetNotImplemented()
	form.Method("acceptCharset").SetNotImplemented()
	form.Method("autocomplete").SetNotImplemented()
	form.Method("enctype").SetNotImplemented()
	form.Method("encoding").SetNotImplemented()
	form.Method("target").SetNotImplemented()
	form.Method("rel").SetNotImplemented()
	form.Method("relList").SetNotImplemented()
	form.Method("length").SetNotImplemented()
	form.Method("name").Ignore()
	form.Method("noValidate").Ignore()
}

func configureHTMLElement(htmlSpecs *WebAPIConfig) {
	htmlElement := htmlSpecs.Type("HTMLElement")
	htmlElement.Method("hidden").Ignore()
	htmlElement.Method("attachInternals").Ignore()
	htmlElement.Method("showPopover").Ignore()
	htmlElement.Method("hidePopover").Ignore()
	htmlElement.Method("togglePopover").Ignore()
	htmlElement.Method("title").Ignore()
	htmlElement.Method("lang").Ignore()
	htmlElement.Method("translate").Ignore()
	htmlElement.Method("dir").Ignore()
	htmlElement.Method("inert").Ignore()
	htmlElement.Method("accessKey").Ignore()
	htmlElement.Method("accessKeyLabel").Ignore()
	htmlElement.Method("draggable").Ignore()
	htmlElement.Method("spellcheck").Ignore()
	htmlElement.Method("writingSuggestions").Ignore()
	htmlElement.Method("autocorrect").Ignore()
	htmlElement.Method("autocapitalize").Ignore()
	htmlElement.Method("innerText").Ignore()
	htmlElement.Method("outerText").Ignore()
	htmlElement.Method("popover").Ignore()
}

func configureHTMLTemplateElement(htmlSpecs *WebAPIConfig) {
	htmlTemplateElement := htmlSpecs.Type("HTMLTemplateElement")
	htmlTemplateElement.Method("shadowRootMode").SetNotImplemented()
	htmlTemplateElement.Method("shadowRootDelegatesFocus").SetNotImplemented()
	htmlTemplateElement.Method("shadowRootClonable").SetNotImplemented()
	htmlTemplateElement.Method("shadowRootSerializable").SetNotImplemented()
}
